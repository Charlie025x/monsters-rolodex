{"version":3,"sources":["components/card/card.component.tsx","components/card-list/card-list.component.tsx","components/search-box/search-box.component.tsx","utils/data.utils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["Card","monster","id","name","email","className","alt","src","CardList","monsters","map","SearchBox","placeholder","onChangeHandler","type","onChange","getData","url","a","fetch","response","json","App","useState","searchField","setSearchField","setMonsters","filteredMonsters","setFilterMonsters","useEffect","users","fetchUsers","newFilteredMonsters","filter","toLocaleLowerCase","includes","event","searchFieldString","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","container","document","getElementById","createRoot","render","StrictMode"],"mappings":"wTAOaA,EAAO,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,QACbC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAA1B,4BAEL,mCAAMC,EAAN,OACA,kCAAKC,EAAL,WCPOI,G,MAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,qBAAKJ,UAAU,YAAf,SACGI,EAASC,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCFZS,G,MAAY,SAAC,GAAD,EACvBN,UADuB,IAEvBO,EAFuB,EAEvBA,YACAC,EAHuB,EAGvBA,gBAHuB,OAKvB,uBACER,UAAU,SACVS,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCnBDG,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,gBAERA,EAASC,OAFD,mFAAH,sDCyDLC,G,MA3CH,WACV,MAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,mBAAoB,IAApD,mBAAOd,EAAP,KAAiBiB,EAAjB,KACA,EAA8CH,mBAASd,GAAvD,mBAAOkB,EAAP,KAAyBC,EAAzB,KAEAC,qBAAU,YACQ,uCAAG,4BAAAX,EAAA,sEACGF,EAClB,8CAFe,OACXc,EADW,OAIjBJ,EAAYI,GAJK,2CAAH,qDAOhBC,KACC,IAEHF,qBAAU,WACR,IAAMG,EAAsBvB,EAASwB,QAAO,SAAChC,GAC3C,OAAOA,EAAQE,KAAK+B,oBAAoBC,SAASX,MAGnDI,EAAkBI,KACjB,CAACvB,EAAUe,IAOd,OACE,sBAAKnB,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,8BAEA,cAAC,EAAD,CACEA,UAAU,sBACVQ,gBAXiB,SAACuB,GACtB,IAAMC,EAAoBD,EAAME,OAAOC,MAAML,oBAC7CT,EAAeY,IAUXzB,YAAY,oBAEd,cAAC,EAAD,CAAUH,SAAUkB,SCxCXa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDRQ,EAAYC,SAASC,eAAe,QAC7BC,qBAAWH,GACnBI,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,OAOJd,M","file":"static/js/main.e0297848.chunk.js","sourcesContent":["import { Monster } from \"../../App\";\r\nimport \"./card.styles.css\";\r\n\r\ntype CardProps = {\r\n  monster: Monster;\r\n};\r\n\r\nexport const Card = ({ monster }: CardProps) => {\r\n  const { id, name, email } = monster;\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        alt=\"monster\"\r\n        src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n      />\r\n      <h2> {name} </h2>\r\n      <p> {email} </p>\r\n    </div>\r\n  );\r\n};\r\n","import { Monster } from \"../../App\";\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport \"./card-list.styles.css\";\r\n\r\ntype CardListProps = {\r\n  monsters: Monster[];\r\n};\r\n\r\nexport const CardList = ({ monsters }: CardListProps) => (\r\n  <div className=\"card-list\">\r\n    {monsters.map((monster) => (\r\n      <Card key={monster.id} monster={monster} />\r\n    ))}\r\n  </div>\r\n);\r\n","import { ChangeEventHandler } from \"react\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\ntype SearchBoxProps = {\r\n  className: string;\r\n  placeholder?: string;\r\n  onChangeHandler: ChangeEventHandler<HTMLInputElement>;\r\n};\r\n\r\nexport const SearchBox = ({\r\n  className,\r\n  placeholder,\r\n  onChangeHandler,\r\n}: SearchBoxProps) => (\r\n  <input\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={onChangeHandler}\r\n  />\r\n);\r\n","export const getData = async <T>(url: string): Promise<T> => {\r\n  const response = await fetch(url);\r\n  return await response.json();\r\n};\r\n","import { useState, useEffect, ChangeEvent } from \"react\";\r\n\r\nimport { CardList } from \"./components/card-list/card-list.component\";\r\nimport { SearchBox } from \"./components/search-box/search-box.component\";\r\n\r\nimport { getData } from \"./utils/data.utils\";\r\nimport \"./App.css\";\r\n\r\nexport type Monster = {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n};\r\n\r\nconst App = () => {\r\n  const [searchField, setSearchField] = useState(\"\");\r\n  const [monsters, setMonsters] = useState<Monster[]>([]);\r\n  const [filteredMonsters, setFilterMonsters] = useState(monsters);\r\n\r\n  useEffect(() => {\r\n    const fetchUsers = async () => {\r\n      const users = await getData<Monster[]>(\r\n        \"https://jsonplaceholder.typicode.com/users\"\r\n      );\r\n      setMonsters(users);\r\n    };\r\n\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const newFilteredMonsters = monsters.filter((monster) => {\r\n      return monster.name.toLocaleLowerCase().includes(searchField);\r\n    });\r\n\r\n    setFilterMonsters(newFilteredMonsters);\r\n  }, [monsters, searchField]);\r\n\r\n  const onSearchChange = (event: ChangeEvent<HTMLInputElement>): void => {\r\n    const searchFieldString = event.target.value.toLocaleLowerCase();\r\n    setSearchField(searchFieldString);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"app-title\">Monsters Rolodex</h1>\r\n\r\n      <SearchBox\r\n        className=\"monsters-search-box\"\r\n        onChangeHandler={onSearchChange}\r\n        placeholder=\"search monsters\"\r\n      />\r\n      <CardList monsters={filteredMonsters} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport { createRoot } from \"react-dom/cjs/react-dom.production.min\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst container = document.getElementById(\"root\");\r\nconst root = createRoot(container);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}